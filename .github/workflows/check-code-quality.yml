name: Check Code Quality

env:
  NODE_VERSION: 18
  PNPM_VERSION: 8.6

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - main

concurrency:
  group: checkCodeQuality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checkCodeQuality:
    name: 'Check Code Quality & Test'
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          check-latest: true

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Read default env vars from .env.dist
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: ${{ github.workspace }}/.env.dist
          log-variables: true
          mask-variables: false
          keys-case: upper

      - name: Copy .env.dist to .env
        run: cp .env.dist .env

      - name: Configure PATH env var
        run: echo "$PWD/node_modules/.bin" >> $GITHUB_PATH

      # ------- Setup node, pnpm and install depedencies using a cache
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://npm.pkg.github.com
          check-latest: true

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Install global dependencies
        run: |
          pnpm add turbo@1 --global

      - id: get-pnpm-store-path
        run: echo PNPM_STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - name: Restore pnpm store cache
        uses: actions/cache@v3
        timeout-minutes: 3
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-pnpm-store-path.outputs.PNPM_STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        # with --frozen-lockfile it fails to install if the lockfile is out of sync with the manifest
        run: pnpm install --frozen-lockfile

      # -------------- end of setup

      - name: Prettify
        run: pnpm prettier-check

      - name: Lint
        run: pnpm lint

      - name: Build code
        run: pnpm build

      - name: Type check
        run: pnpm type-check

      - name: Publint
        run: pnpm publint-check

      - name: Run tests
        run: pnpm test:ci

      - name: Validate assets
        run: pnpm data:validate
